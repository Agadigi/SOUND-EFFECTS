from pydub import AudioSegment
from pydub.playback import play
import pygame
import random

pygame.init()

win = pygame.display.set_mode((850, 400))

pygame.display.set_caption("Enemy Game")

walkRight = [
    pygame.image.load('R1.png'),
    pygame.image.load('R2.png'),
    pygame.image.load('R3.png'),
    pygame.image.load('R4.png'),
    pygame.image.load('R5.png'),
    pygame.image.load('R6.png'),
    pygame.image.load('R7.png'),
    pygame.image.load('R8.png'),
    pygame.image.load('R9.png'),
    pygame.image.load('R10.png')
]
walkLeft = [
    pygame.image.load('L1.png'),
    pygame.image.load('L2.png'),
    pygame.image.load('L3.png'),
    pygame.image.load('L4.png'),
    pygame.image.load('L5.png'),
    pygame.image.load('L6.png'),
    pygame.image.load('L7.png'),
    pygame.image.load('L8.png'),
    pygame.image.load('L9.png'),
    pygame.image.load('L10.png')
]
bg = pygame.image.load('bg.jpg')
char = pygame.image.load('standing.png')

class Audio:
    def __init__(self):
        self.bullet_sound = AudioSegment.from_wav('bullet.wav')
        self.hit_sound = AudioSegment.from_wav('hit.wav')
        play(AudioSegment.from_mp3('music.mp3'))

    def play_bullet_sound(self):
        play(self.bullet_sound)

    def play_hit_sound(self):
        play(self.hit_sound)
  
class player(object):
    def __init__(self, x, y, width, height):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.vel = 5
        self.isJump = False
        self.left = False
        self.right = False
        self.walkCount = 0
        self.standing = True
        self.last_shot_time = 0
        self.fire_rate = 1

    def draw(self, win):
        if self.walkCount >= len(walkRight) * 3:
            self.walkCount = 0

        if not self.standing:
            if self.left:
                win.blit(walkLeft[self.walkCount // 3], (self.x, self.y))
                self.walkCount += 1
            elif self.right:
                win.blit(walkRight[self.walkCount // 3], (self.x, self.y))
                self.walkCount += 1
        else:
            if self.right:
                win.blit(walkRight[0], (self.x, self.y))
            else:
                win.blit(walkLeft[0], (self.x, self.y))

    def move(self):
        keys = pygame.key.get_pressed()

        if keys[pygame.K_LEFT] and self.x > self.vel:
            self.x -= self.vel
            self.left = True
            self.right = False
            self.standing = False
        elif keys[pygame.K_RIGHT] and self.x < 850 - self.width - self.vel:
            self.x += self.vel
            self.right = True
            self.left = False
            self.standing = False
        else:
            self.standing = True
            self.walkCount = 0

        if keys[pygame.K_DOWN] and self.y < 400 - self.height:
            self.y += self.vel
        elif keys[pygame.K_UP] and self.y > 0:
            self.y -= self.vel


class projectile(object):
    def __init__(self, x, y, width, height, facing):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.facing = facing
        self.vel = 10 * facing
        self.image = pygame.image.load('fireball6.png')

    def draw(self, win):
        win.blit(self.image, (self.x, self.y))


class enemy(object):
    walkLeft = [
        pygame.image.load('L1E.png'),
        pygame.image.load('L2E.png'),
        pygame.image.load('L3E.png'),
        pygame.image.load('L4E.png'),
        pygame.image.load('L5E.png'),
        pygame.image.load('L6E.png')
    ]

    def __init__(self, x, y, width, height, respawn_x):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.walkCount = 0
        self.vel = 10
        self.respawn_x = respawn_x
        self.respawn()

    def draw(self, win):
        self.move()
        if self.walkCount + 1 >= len(self.walkLeft) * 3:
            self.walkCount = 0
        win.blit(self.walkLeft[self.walkCount // 3], (self.x, self.y))
        self.walkCount += 1

    def move(self):
        self.x -= self.vel

        if self.x + self.width <= 0:
            self.respawn()

    def respawn(self):
        self.x = self.respawn_x
        self.y = random.randint(50, 350)


def redrawGameWindow():
    win.blit(bg, (0, 0))
    dragon.draw(win)
    phoenix.draw(win)
    for bullet in bullets:
        bullet.draw(win)
    pygame.display.update()


# mainloop
audio = Audio()
dragon = player(100, 100, 90, 80)
phoenix_respawn_x = 850
phoenix = enemy(phoenix_respawn_x, random.randint(50, 350), 64, 64,
                phoenix_respawn_x)
bullets = []
run = True

while run:
    clock.tick(27)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            run = False

    for bullet in bullets:
        if 0 < bullet.x < 850:
            bullet.x += bullet.vel
        else:
            bullets.remove(bullet)

    keys = pygame.key.get_pressed()

    if keys[pygame.K_SPACE]:
        if dragon.left:
            facing = -1
        else:
            facing = 1

        dragon.shoot_sound.play()

        if len(bullets) < 5 and pygame.time.get_ticks() - dragon.last_shot_time > dragon.fire_rate * 1000:
            bullet_x = round(dragon.x + dragon.width // 2)
            bullet_y = round(dragon.y + dragon.height // 2)
            bullets.append(projectile(bullet_x, bullet_y, 6, 6, facing))
            audio.play_bullet_sound()
            dragon.last_shot_time = pygame.time.get_ticks()

    dragon.move()
    redrawGameWindow()

pygame.quit()
